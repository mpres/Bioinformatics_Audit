{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww20360\viewh11160\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 1. Writing a simulator\
\
a. a random set of theta (I've done that)\
b. get 10 L's (different lengths) simulator should be able to handle that\
\
c convert theta into nucleotide abundance by times each theta by its' length and renormalizing\
1. choice once based weighted by the nucleotide length,\
\
2. chose a letter,\
\
creates a transcripts L, and the vi weighted matrix\
\
sub: function\
1. create a function that generates a random read. a,b,c,d,e,f,g,h,i,j\
inputs are nucleotide abundance (weight array),\
\
\
\
\
Do EM\
\
First Do the Expectation starting with a random theta \
\
create the posterior probability\
           \uc0\u952 Arc_1	\u952 Arc_2 	\u952 Arc_3	\u952 Arc_4	\u952 Arc_5	\u952 Arc_6      \u952 Arc_7 \
read [ if in Arc (theta *1/L ]\
\
read_theta_table\
\
iteration through each read, using the changing theta, * 1/L if it's in there) this will bu\
\
Once this table is set, you are ready for the Maximization part,\
\
this will sum of the columns, for once single theta array, and then normaize the data,\
\
for the a new pair of theta,'\
\
  -after that you will run the LL to see how it does,}